#!/usr/bin/perl

=head1
 seq_fast -- Tools for parse fasta/fastq sequences 
 v0.1 / 03-23-2013 / Yi Zheng / yz357 at cornell.edu
=cut

use strict;
use warnings;
use Bio::SeqIO;
use IO::File;
use Getopt::Long;







=head2
 seq_format -- format fasta fomrmat
=cut
sub seq_format
{

}

=head2
 seq_covert -- convert seq format 
=cut 
sub seq_convert
{
	my $usage = qq'
	
	fq to fa
	fa to fq
	sff/sra to fastq ....
	fq 33 to 64
	fq 64 to 33

';
}


=head2
 seq_filter -- extract seq by all kinds condition
=cut
sub seq_extract
{

	my $usage = qq'
	extract by length
	extract by ID
	extract by ID list
	extract by order (form 100-200)
	--reverse

';

}


=head2
 plan -- print update plan
=cut
sub plan
{
	print qq'
Update Plan

';
	exit;
}

=head2
 usage -- print usage info
=cut
sub usage
{
	my $version = shift;
	my $usage = qq'
USAGE: $0 seq_fast -t/--tool [tools] input-seq

 -i/--input-seq seq_file [options] (*seq_file: support fastq, fasta, and gzip file.)

 -s/--stat		report sequence number, maxinum and minunum length, avg length, and total base
 --format-fasta		format the fasta file to one sequence or ID per line
 --extract-id		<name> extrace sequence using input ID
 --start-end		<int-int> must used with --extract-id
 --start-length		<int-int> must used with --extract-id
 --trim-left		<int>  trim left end 
 --trim-right		<int>  trim right end
 --extract-list		<name> extract sequences from input list ID
 --extract-length	get sequence length 
 -u/--uniq-seq		get uniq sequence [not finished]
 --fq2fa		convert fastq to fasta format [not finished]
 -r/--reverse-complement

 -dist			<range file> generate distribution of input sequence; one range one line, do not have overlap
			example: 101-200 : count the number of reads from 101 to 200 bp
 -cut			<int> cut sequence into different parts

 -h/?/--help		help info.

';
	print $usage;
	exit;
}

my ($help ,$seq_file, $format_fasta, $stat, $extract_id_list, $extract_id, $start_end, $start_length, 
	$trim_left, $trim_right, $uniq_seq, $fq2fa, $rev_com, $cut, $dist);

GetOptions(
	"h|?|help"		=> \$help,
	"i|input-seq=s"		=> \$seq_file,
	"format-fasta"		=> \$format_fasta,
	"s|stat"		=> \$stat,
	"extract-list=s"	=> \$extract_id_list,
	"extract-id=s"		=> \$extract_id,
	"start-end=s"		=> \$start_end,
	"start-length=s"	=> \$start_length,
	"trim-left=i"		=> \$trim_left,
	"trim-right=i"		=> \$trim_right,
	"u|uniq-seq"		=> \$uniq_seq,
	"fq2fa"			=> \$fq2fa,
	"r|reverse-complement"	=> \$rev_com,
	"cut=i"			=> \$cut,
	"dist=s"		=> \$dist
);

die $usage if $help;
die $usage unless $seq_file;

#################################################################
# Parse the parameters						#
#################################################################

my @para = ( $stat, $extract_id_list, $extract_id, $uniq_seq, $fq2fa, $rev_com, $cut, $dist );
my $para_count = 0;
foreach my $parameter (@para) {
	if ($parameter) { $para_count++; }
}
if ($trim_left || $trim_right) { $para_count++; }
if ( $para_count > 1 ) { die $usage; } 
if ( $para_count == 0) { $stat = 1; }

# parameters for extract sequences by id list
my %id_list;
if ($extract_id_list) { %id_list = get_gene_id_list($extract_id_list); }

# parameters for extract sequence by id
my ($start, $end, $length, $sub_seq);
if ($extract_id) {
	if ($start_end && $start_length) 
		{ die $usage; } 
	elsif ( $start_end ) 
		{ ($start, $end) = split(/-/, $start_end, 2); 
		  if ($start =~ m/\D/) { die $usage; }
		  if ($end =~ m/\D/) { die $usage; }
		} 
	elsif ( $start_length ) 
		{ ($start, $length) = split(/-/, $start_length, 2); 
		  if ($start =~ m/\D/) { die $usage; }
		  if ($length =~ m/\D/) { die $usage; }
		}
} else {
	if ($start_end) { die "start-end must be used with extract-id\n".$usage; } 
	if ($start_length) { die "start-length must be used with extract-id\n".$usage; }
}

# parameters for get uniq reads
my %uniq_read;

#################################################################
# format fasta sequence using SeqIO                             #
#################################################################
if ($format_fasta) {
        if ($seq_file =~ m/\.gz$/) { die "Error, Bio::SeqIO do not support gzip file.\n"; } 
	my $seq_identify = `grep -c \'@\' $seq_file`; chomp($seq_identify);
	my $line_num = `wc -l $seq_file`; $line_num =~ s/\s+.*//;	
	if ($seq_identify >= $line_num/4) { die "\nError, do not support fastq for format-fasta\n$usage"; }

        my $in = Bio::SeqIO->new(-format=>'fasta', -file=>$seq_file);
        while(my $inseq = $in->next_seq) {
                print ">", $inseq->id, " ", $inseq->desc, "\n", $inseq->seq, "\n";
        }
        exit(0);
}

#################################################################
# parse sequence handle for gziped and unziped file 		#
#################################################################
my $fh;

if ($seq_file =~ m/\.gz$/)
{
	open($fh, "<:gzip", $seq_file) || die "can not open sequence file $seq_file\n";
}
else
{
	open($fh, $seq_file) || die "can not open sequence file $seq_file\n";
}

#################################################################
# parse the dist file						#
#################################################################
my ($len_range, $range_stat, $min_range, $max_range);
if ($dist) { 
	($len_range, $range_stat, $min_range, $max_range) = parse_dist($dist); 
}

#################################################################
# parse the sequence 						#
#################################################################

my ($max_len, $min_len, $avg_len, $total_base); $total_base = 0;

my (	$seq_id_info, 	# include sequence id and sequence description, separated by spaces
	$seq_id,	# sequence id
	$seq_desc,	# sequence description
	$format,	# format
	$sequence,	# sequence
	$rc_seq,	# reverse complement sequence
	$seq_length,	# sequence length
	$seq_num	# sequence number
);	

my %seq_hash; 		# key: seq_id; value: sequence

while(<$fh>)
{
	chomp;
	$seq_id_info = $_;
	if      ($seq_id_info =~ m/^>/) { $format = 'fasta'; $seq_id_info =~ s/^>//; }
        elsif   ($seq_id_info =~ m/^@/) { $format = 'fastq'; $seq_id_info =~ s/^@//; }
        else    { die "Error at seq format: $seq_id_info\n"; }
	($seq_id, $seq_desc) = split(/\s+/, $seq_id_info, 2);
	unless ($seq_desc) { $seq_desc = ""; }

	$sequence = <$fh>; chomp($sequence);
	$seq_length = length($sequence);
	$seq_num++;

	if ($dist)
	{
		if ( defined $$len_range{$seq_length} )
		{
			$$range_stat{$$len_range{$seq_length}}++;
		}
		elsif ($seq_length > $max_range)
		{
			$$range_stat{'max'}++;
		}
		elsif ($seq_length < $min_range)
		{
			$$range_stat{'min'}++;
		}
	}	

	# code for stat the info 
	if ($stat) 
	{ 
		unless (defined $max_len) { $max_len = $seq_length; }
		unless (defined $min_len) { $min_len = $seq_length; }
		if ($seq_length > $max_len) { $max_len = $seq_length; }
		if ($seq_length < $min_len) { $min_len = $seq_length; }
		$total_base = $total_base + $seq_length;
	}
	elsif ($extract_id_list)
	{
		if ( defined $id_list{$seq_id} ) {
			print ">$seq_id $seq_desc\n$sequence\n";
		}
	}
	elsif ($extract_id)
	{
		if ($seq_id eq $extract_id)
		{
			if ($start_end)
			{
				$seq_desc = "START:$start; END:$end; ".$seq_desc;
				$sub_seq = substr($sequence, $start-1, $end-$start+1);
			}
			elsif ($start_length)
			{
				$seq_desc = "START:$start; LEN:$length; ".$seq_desc;
				$sub_seq = substr($sequence, $start-1, $length);
			}
			else
			{
				$sub_seq = $sequence;
			}
			print ">$seq_id $seq_desc\n$sub_seq\n";
			exit(0);
		}
	}
	elsif ($trim_left || $trim_right)
	{
		if ($trim_left && $trim_right)
		{
			if ($trim_left + $trim_right > $seq_length) 
			{ die "Error, trim length > seq length; trim-left:$trim_left; trim-right:$trim_right: seq-length:$seq_length\n"; }
			$seq_desc = "Trim-Left:$trim_left; Trim-Right:$trim_right; ".$seq_desc;
			$sub_seq = substr($sequence, 0, $seq_length-$trim_right);
			$sub_seq = substr($sub_seq, $trim_left);
		}
		elsif ($trim_left)
		{
			if ($trim_left > $seq_length)
			{ die "Error, trim left > seq length; trim-left:$trim_left; seq-length:$seq_length\n"; }
			$seq_desc = "Trim-Left:$trim_left; ".$seq_desc;
			$sub_seq = substr($sequence, $trim_left);
		}
		elsif ($trim_right)
		{
			if ($trim_right > $seq_length)
			{ die "Error, trim right > seq length; trim-right:$trim_right: seq-length:$seq_length\n"; }
			$seq_desc = "Trim-Right:$trim_right; ".$seq_desc;
			$sub_seq = substr($sequence, 0, $seq_length-$trim_right);
		}
		print ">$seq_id $seq_desc\n$sub_seq\n";
	}
	elsif ($uniq_seq)
	{
		if ( defined $uniq_read{$sequence} ) { $uniq_read{$sequence}++; }
        	else { $uniq_read{$sequence} = 1; }
	}
	elsif ($fq2fa)
	{
		print ">$seq_id $seq_desc\n$sequence\n";
	}
	elsif ($rev_com)
	{
		$rc_seq = reverse($sequence);
               	$rc_seq =~ tr/atgcrymkswATGCRYMKSW/tacgyrkmswTACGYRKMSW/;
		print ">$seq_id $seq_desc\n$rc_seq\n";
	}
	elsif ( $cut )
	{

	}
 	elsif ( $dist )
	{
		$seq_hash{$seq_id} = $sequence;
	}


	if ($format eq 'fastq') { <$fh>; <$fh>; }
}
$fh->close;

#################################################################
# kentnf1: out put the results					#
#################################################################

if ($dist)
{
	foreach my $rid (sort {$a<=>$b} keys %$range_stat)
	{
		print $rid."\t".$$range_stat{$rid}."\n";
	}
}

sub parse_dist
{
	my $dist = shift;
	my %len_range; 	# key: length of read; value range ID [1,2...n]
	my %range_stat; # key: range ID; number;
	my ($min, $max) = (1000000000, 0);
	my $range_id = 0;
	my $fh = IO::File->new($dist) || die $!;
	while(<$fh>)
	{
		chomp;
		next if $_ =~ m/^#/;
		$range_id++;
		my @a = split(/-/, $_);
		die "Error in range $_\n" if ( $a[0] < 1 && $a[1] < 1 );
		die "Error in range $_\n" unless scalar @a == 2;
		for(my $i=$a[0]; $i<=$a[1]; $i++)
		{
			if ( defined $len_range{$i} ) {
				die "Error, the range file has overlap\n";
			} else {
				$len_range{$i} = $range_id;
			}
		}
		if ( $a[1] < $a[0]) { die "Error in range $_\n"; }
		if ( $a[0] < $min ) { $min = $a[0] };
		if ( $a[1] > $max ) { $max = $a[1] };

		$range_stat{$range_id} = 0;
	}
	close($fh);

	$range_stat{'max'} = 0;
	$range_stat{'min'} = 0;

	return (\%len_range, \%range_stat, $min, $max);
}




if ($stat) 
{
	$avg_len = sprintf("%.2f", $total_base/$seq_num);
	print "\n$seq_file -- SeqNum:$seq_num; MaxLen: $max_len; MinLen: $min_len; AvgLen: $avg_len; TotalBase: $total_base\n\n";
}

if ($uniq_seq)
{
	my $length = length($seq_num);

	# sort the reads by num
	my %sort_read_by_num;
	foreach my $seq (sort keys %uniq_read)
	{
		my $num = $uniq_read{$seq};
		if ($num > 1)
		{
			if (defined $sort_read_by_num{$num} )
			{
				$sort_read_by_num{$num}.="\t".$seq;
			}
			else
			{
				$sort_read_by_num{$num} = $seq;
			}
			#$read{$seq};
			delete $uniq_read{$seq};
		}
	}

	#print scalar(keys(%sort_read_by_num))."\n";
=head
	# output the results
	my $seq_num = 0;
	open(OUT, ">".$out_file) || die "Can not open output file $out_file $!\n";

	foreach my $num (sort { $b<=>$a } keys %sort_read_by_num)
	{
        	my @seq = split(/\t/, $sort_read_by_num{$num});
        	foreach my $seq (@seq)
        	{
                	$seq_num++;
                	my $seq_id = add_zero($seq_num, $length);
                	$seq_id = $read_id_prefix.$seq_id;
                	print OUT ">$seq_id\t$num\n$seq\n";
        	}
	}

	foreach my $seq (sort keys %uniq_read)
	{
        	$seq_num++;
        	my $seq_id = add_zero($seq_num, $length);
        	$seq_id = $read_id_prefix.$seq_id;
        	print OUT ">$seq_id\t1\n$seq\n";
	}

	close(OUT);

	print "No. of read: $total_read\nNo. of uniq read: $seq_num\n";
=cut
}
#################################################################
# kentnf:subroutine						#
#################################################################

=head1 get_gene_id_list

=cut
sub get_gene_id_list
{
	my $list_file = shift;
	my %list_hash;
	my $fh = IO::File->new($list_file) || die "Can not open list file $list_file $!\n";
	while(<$fh>)
	{
		chomp;
		my @a = split(/\s+/, $_);
		$list_hash{$a[0]} = 1;
	}
	$fh->close;
	return %list_hash;
}

=head1

=cut
sub add_zero
{
	my ($id, $length) = @_;
	my $id_len = length($id);
	my $zero = "";
	for(my $i=0; $i<$length-$id_len; $i++)
	{
		$zero.="0";
	}
	my $return_id = $zero.$id;
	return $return_id;
}



